let {{

def MMemBase(name, Name, ea_code, code, base_class,
             mem_flags, inst_flags,
             declare_template_base=MatrixMacroDeclare,
             decode_template=MatrixDecode, 
             exec_template_base='',
             macro_construtor=MatrixMacroConstructor,
             op_class='',
             is_macroop=True):
    iop = InstObjParams(name, Name, base_class, 
        { 'code': code,
          'ea_code': ea_code,
          'op_class': op_class },
          inst_flags)


    header_output   = declare_template_base.subst(iop)
    decoder_output  = macro_construtor.subst(iop)
    decode_block    = decode_template.subst(iop)
    exec_output     = ''

    if not is_macroop:
        return (header_output, decoder_output, decode_block, exec_output)
    
    micro_class_name = exec_template_base + 'MicroInst'
    microiop = InstObjParams(name + '_micro',
        Name + 'Micro',
        exec_template_base + 'MicroInst',
        {'ea_code': ea_code,
         'code': code},
        inst_flags
        )
    
    microDeclTemplate = eval(exec_template_base + 'MicroDeclare')
    microConsTemplate = eval(exec_template_base + 'MicroConstructor')
    microExecTemplate = eval(exec_template_base + 'MicroExecute')
    microInitTemplate = eval(exec_template_base + 'MicroInitiateAcc')
    microCompTemplate = eval(exec_template_base + 'MicroCompleteAcc')
    header_output = microDeclTemplate.subst(microiop) + header_output
    decoder_output = microConsTemplate.subst(microiop) + decoder_output
    micro_exec_output = (microExecTemplate.subst(microiop) +
        microInitTemplate.subst(microiop) +
        microCompTemplate.subst(microiop))
    exec_output += micro_exec_output

    return (header_output, decoder_output, decode_block, exec_output)


def MArithBase(name, Name, code, base_class,
             inst_flags,
             declare_template_base=MatrixMacroDeclare,
             decode_template=MatrixDecode,
             constructor_template=MatrixMacroConstructor,
             exec_template_base='MatrixArith',
             op_class='OpClass::Matrix',
             is_macroop=True):
    iop = InstObjParams(name, Name, base_class, 
        { 'code': code,
          'op_class': op_class },
          inst_flags)

    header_output   = declare_template_base.subst(iop)
    decoder_output  = constructor_template.subst(iop)
    decode_block    = decode_template.subst(iop)
    exec_output     = ''

    if not is_macroop:
        return (header_output, decoder_output, decode_block, exec_output)
    
    micro_class_name = exec_template_base + 'MicroInst'
    microiop = InstObjParams(name + '_micro',
        Name + 'Micro',
        exec_template_base + 'MicroInst',
        {'code': code,
         'op_class': op_class},
        inst_flags
        )

    microDeclTemplate = eval(exec_template_base + 'MicroDeclare')
    microConsTemplate = eval(exec_template_base + 'MicroConstructor')
    microExecTemplate = eval(exec_template_base + 'MicroExecute')
    header_output = microDeclTemplate.subst(microiop) + header_output
    decoder_output = microConsTemplate.subst(microiop) + decoder_output
    micro_exec_output = microExecTemplate.subst(microiop)
    exec_output += micro_exec_output

    return (header_output, decoder_output, decode_block, exec_output)


def MMoveBase(name, Name, code, base_class,
             inst_flags,
             declare_template_base=MatrixMacroDeclare,
             decode_template=MatrixDecode, 
             micro_constructor='',
             macro_construtor=MatrixMacroConstructor,
             micro_base='MatrixMove',
             micro_exec=MatrixArithLineMicroExecute,
             op_class='OpClass::Matrix',
             is_macroop=True):
    iop = InstObjParams(name, Name, base_class, 
        { 'code': code,
          'op_class': op_class },
          inst_flags)

    header_output   = declare_template_base.subst(iop)
    decoder_output  = macro_construtor.subst(iop)
    decode_block    = decode_template.subst(iop)
    exec_output     = ''

    if not is_macroop:
        return (header_output, decoder_output, decode_block, exec_output)

    micro_class_name = micro_base + 'MicroInst'    
    microiop = InstObjParams(name + '_micro',
        Name + 'Micro',
        micro_class_name,
        {'code': code,
         'op_class': op_class},
        inst_flags)

    microDeclTemplate = eval(micro_base + 'MicroDeclare')
    header_output = microDeclTemplate.subst(microiop) + header_output
    decoder_output = micro_constructor.subst(microiop) + decoder_output
    micro_exec_output = micro_exec.subst(microiop)
    exec_output += micro_exec_output

    return (header_output, decoder_output, decode_block, exec_output)
}};


def format MatrixLoadOp(
    code,
    ea_code={{
        EA = Rs1 + ((uint64_t) microIdx / 4) * Rs2 + (microIdx % 4) * 4;
    }},
    mem_flags=[],
    *flags
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        MMemBase(name, Name, ea_code, code, 'MatrixLoadMacroInst', 
                mem_flags, flags, op_class='MemReadOp',
                macro_construtor=MatrixMacroConstructor,
                exec_template_base='MatrixLoad')
}};


def format MatrixStoreOp(
    code,
    ea_code={{
        EA = Rs1 + ((uint64_t) microIdx / 4) * Rs2 + (microIdx % 4) * 4;
    }},
    mem_flags=[],
    *flags
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        MMemBase(name, Name, ea_code, code, 'MatrixStoreMacroInst', 
                 mem_flags, flags, op_class='MemWriteOp',
                 macro_construtor=MatrixMacroConstructor,
                 exec_template_base='MatrixStore')
}};


def format MatrixArithLineOp(
    code,
    *flags
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        MArithBase(name, Name, code, 'MatrixArithMacroInst', 
                   flags,
                   constructor_template=MatrixMacroConstructor,
                   exec_template_base='MatrixArithLine')
}};


def format MatrixArithOp(
    code,
    *flags
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        MArithBase(name, Name, code, 'MatrixArithMacroInst', 
                   flags)
}};


def format ScalarMatrixMoveOp(
    code,
    *flags
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        MMoveBase(name, Name, code, 'MatrixMoveMacroInst', 
                   flags,
                   macro_construtor=MatrixMacroConstructor,
                   micro_constructor=ScalarMatrixMoveMicroConstructor)
}};
